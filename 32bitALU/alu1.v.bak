 
module alu1(out,cout,a,b,cin,less,op);
//(a,b,less,cin,op,cout,out);
	input a,b,cin,less;
	input [2:0] op;
	
	output cout;
	output out;
	
	wire not1,not2,xor1,and1,or1,nand1,and2,and3,or2,nand3,and4,ww,w;
	
	not (not1, b);
	not (not2, op[2]);
	and (ww,b,not2);
	and (w,not1,op[2]);
	or (xor1,ww,w);
	
	and (and1, a, xor1);
	or (or1, a, xor1);
	not (nand1 ,and1);
	and (and2 , nand1, or1);
	and (and3 ,and2 ,cin);
	or (or2 , and2, cin);
	not (nand3, and3);
	and (and4, nand3, or2);
	or (cout, and1 ,and3);
	

	mux1 hadi(out,and1,or1,and4,less,op[1:0]);
	 

	
endmodule


/*
module ALUTester();
    reg [31:0] a, b;
    reg [2:0] op;
    wire zero, overflow, cout;
    wire [31:0] out;

    ALU alu(zero, out, overflow, cout, a, b, op);

    parameter maxSize = 42949;
    initial begin
        $monitor($time, ", %b, %d, %d, %d, %d, %d", op, a, b, zero, out, overflow);
        op = 0;
        repeat(1000) begin
            #1000 a = $random % maxSize; b = $random % maxSize;
        end

        op = 1;
        repeat(1000) begin
            #1000 a = $random % maxSize; b = $random % maxSize;
        end

        op = 2;
        repeat(1000) begin
            #1000 a = $random % maxSize; b = $random % maxSize;            
        end

        op = 6;
        repeat(1000) begin
            #1000 a = $random % maxSize; b = $random % maxSize;
        end

        op = 7;
        repeat(1000) begin
            #1000 a = $random % maxSize; b = $random % maxSize;
        end
    end
endmodule

*/




	